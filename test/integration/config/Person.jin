[People]
identity = id
model    = Person
mapTo    = people
uniqueOn = [
	["team", "teamRank"],
	["email"]
]
ordering = {
	"lastName"  : "asc",
	"firstName" : "asc"
}

	[People.fields.id]
	type      = integer
	generator = native
	mapTo     = id

	[People.fields.firstName]
	type     = string
	nullable = FALSE
	mapTo    = first_name

	[People.fields.lastName]
	type     = string
	nullable = TRUE
	mapTo    = last_name

	[People.fields.email]
	type     = string
	nullable = FALSE
	mapTo    = email

	; Example of one-to-many

	[People.fields.phoneNumbers]
	type   = hasMany
	target = PhoneNumbers
	unique = TRUE
	order  = {
		"priority" : "asc"
	}
	route  = {
		"phone_numbers" : { "id" : "person" }
	}

	; Example of many-to-one

	[People.fields.team]
	type    = hasOne
	target  = Teams
	default = {
		"name ==" : "Interns"
	}
	route   = {
		"teams" : { "team" : "id" }
	}

	[People.fields.teamRank]
	type    = integer
	default = NULL
	mapTo   = team_rank

	; Example of one-to-one

	[People.fields.user]
	type   = hasOne
	target = Users
	unique = TRUE
	route  = {
		"users" : { "id" : "person" }
	}

	[People.fields.authLevel]
	type    = string
	target  = user.authLevel

	; Example of many-to-many

	[People.fields.groups]
	type    = hasMany
	target  = Groups
	default = {
		"default ==": TRUE
	}
	route   = {
		"user_groups" : { "id"    : "user" },
		"groups"      : { "group" : "id"}
	}
